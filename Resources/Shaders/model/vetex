#version 400 core

in vec3 v, vn;
in vec2 vt;

uniform mat4 mv_matrix, p_matrix, translation_matrix, rotation_matrix, scale_matrix; // not last mvp, just same name
uniform float x_angle, y_angle, z_angle; // rotation angle
uniform bool use_rotation_matrix; // for train on track

uniform bool use_lighting, shadows;

uniform vec4 lights_position[20], lights_color[20], lights_orientation[20];
uniform float lights_power[20], cutoffs[20];
uniform int lights_type[20], lights_size;

uniform vec4 mtl_ambient, mtl_specular;

out vec2 uv;
out vec4 DAS_color;

mat4 rotationMatrix(float angle, vec3 axis)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // Transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // Get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    // Get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // Calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(fs_in.Normal);
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    // Check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;

    // Keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;

    return shadow;
}

void main()
{
    mat4 model_view_matrix, obj_model_mattrix; // real mv
    if (use_rotation_matrix)
        obj_model_mattrix =
            translation_matrix *
            rotation_matrix *
            rotationMatrix(x_angle, vec3(1, 0, 0)) *
            rotationMatrix(y_angle, vec3(0, 1, 0)) *
            rotationMatrix(z_angle, vec3(0, 0, 1)) *
            scale_matrix;
    else
        obj_model_mattrix =
            translation_matrix *
            rotationMatrix(x_angle, vec3(1, 0, 0)) *
            rotationMatrix(y_angle, vec3(0, 1, 0)) *
            rotationMatrix(z_angle, vec3(0, 0, 1)) *
            scale_matrix;
    model_view_matrix = mv_matrix * obj_model_mattrix;
    gl_Position = p_matrix * model_view_matrix * vec4(v, 1);

    uv = vt;

    DAS_color = vec4(0, 0, 0, 0);

    // Calculate shadow
    float shadow = shadows ? ShadowCalculation(fs_in.FragPosLightSpace) : 0.0;
    shadow = min(shadow, 0.75); // reduce shadow strength a little

    // for lighting data at camera space
    // from vertex to eye(camera, at camera space it's at (0, 0, 0))
    vec3 eye_direction = -(model_view_matrix * vec4(v, 1)).xyz;

    // x, y, z scale not same influence normal
    vec3 normal = normalize(mat3(transpose(inverse(model_view_matrix))) * vn);

    for (int i=0; i < lights_size; ++i) {

        if (lights_type[i] == 1) { // point light

            // mv_matrix is light's mv. from vertex to light
            vec3 light_direction = (mv_matrix * lights_position[i]).xyz + eye_direction;
            vec3 reflect_direction = normalize(reflect(normalize(-light_direction), normal));

            // in world space
            float distance = length(lights_position[i] - obj_model_mattrix * vec4(v, 1));

            // quadratic function attenuation
            float attenuation = pow(distance, 2) / 1000 + 1;

            vec4 diffuse = clamp(dot(normal, normalize(light_direction)), 0, 1) * lights_color[i];
            vec4 ambient = mtl_ambient * lights_color[i];
            vec4 specular = mtl_specular * pow(clamp(dot(normalize(eye_direction), reflect_direction), 0, 1), 3) * lights_color[i];

            // send to fragment shader
            if (!use_lighting)
                continue;
            else
                DAS_color += lights_power[i] * (ambient + (1 - shadow) * (diffuse + specular)) / attenuation;
        }
        else if (lights_type[i] == 2) { // spot light

            // mv_matrix is light's mv. from vertex to light
            vec3 light_direction = (mv_matrix * lights_position[i]).xyz + eye_direction;
            vec3 reflect_direction = normalize(reflect(normalize(-light_direction), normal));

            float theta = clamp(dot(normalize(-light_direction), normalize(lights_orientation[i].xyz)), 0, 1);
            if (theta > cutoffs[i]) {
                float distance = length(lights_position[i] - obj_model_mattrix * vec4(v, 1));

                // quadratic function attenuation
                float attenuation = pow(distance, 2) / 1000 + 1;

                vec4 diffuse = clamp(dot(normal, normalize(light_direction)), 0, 1) * lights_color[i];
                vec4 ambient = mtl_ambient * lights_color[i];
                vec4 specular = mtl_specular * pow(clamp(dot(normalize(eye_direction), reflect_direction), 0, 1), 3) * lights_color[i];

                // send to fragment shader
                if (!use_lighting)
                    continue;
                else
                    DAS_color += lights_power[i] * (ambient + (1 - shadow) * (diffuse + specular)) / attenuation;
            }
        }
        else { // directional light

            // lights_orientation[i] = -light_direction in directional light
            vec3 light_direction = normalize(-lights_orientation[i].xyz);
            vec3 reflect_direction = normalize(reflect(-light_direction, normal));

            vec4 diffuse = clamp(dot(normal, light_direction), 0, 1) * lights_color[i];
            vec4 ambient = mtl_ambient * lights_color[i];
            vec4 specular = mtl_specular * pow(clamp(dot(normalize(eye_direction), reflect_direction), 0, 1), 3) * lights_color[i];

            // send to fragment shader, no attenuation
            if (!use_lighting)
                DAS_color += lights_power[i] * ambient;
            else
                DAS_color += lights_power[i] * (ambient + (1 - shadow) * (diffuse + specular));
        }
    }
}
